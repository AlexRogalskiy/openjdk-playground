[versions]
# Project versions

# External dependencies
commons-codec        = "1.11"
commons-io           = "2.6"

google-truth         = "1.0.1"
jb-compose           = "1.0.0-alpha4-build331"
jnr-unixsocket       = "0.21"
json-path            = "2.4.0"
json-pathkt          = "2.0.0"

kotlin               = "1.5.30"
kotlinx-coroutines   = "1.5.1"
kotlinx-cli          = "0.3.2"
kotlin-ksp           = "1.5.30-1.0.0"

ktor                 = "1.6.3"
micronaut-bom        = "2.0.0"
netty-resolveDns     = "4.1.32.Final"
ok-io                = "2.2.0"

assertj              = "3.11.1"
awaitility           = "3.1.6"
commonmark           = "0.18.0"
diffUtils            = "4.9"
ff4j                 = "1.3.0"
freemarker           = "2.3.31"
funcj                = "0.6.16"
japicmp              = "0.13.0"
jffi                 = "1.2.18"
jfreesvg             = "3.3"
jgit                 = "5.12.0.202106070339-r"
jgrapht              = "1.5.0"
jimfs                = "1.1"
jol                  = "0.9"
jsr305               = "3.0.2"
kaml                 = "0.35.3"
kobweb               = "0.3.0-SNAPSHOT"
konsole              = "0.9.0-SNAPSHOT"
ljv                  = "1.02"
logback              = "1.2.3"
shadow               = "7.0.0"
mapstruct            = "1.4.2.Final"
openpdf              = "1.2.9"
orsonpdf             = "1.8"
streamex             = "0.7.3"
threetenExtra        = "1.7.0"
trov4j               = "1.0.20181211"
truthish             = "0.6.0"
turbine              = "0.1.1"
typetools            = "0.6.2"
# jnr-fuse
[libraries]
# Local projects

# External dependencies
commonmark-core         = { module = "org.commonmark:commonmark"                        , version.ref = "commonmark" }
commonmark-autolink     = { module = "org.commonmark:commonmark-ext-autolink"           , version.ref = "commonmark" }
commonmark-frontmatter  = { module = "org.commonmark:commonmark-ext-yaml-front-matter"  , version.ref = "commonmark" }
commonmark-tables       = { module = "org.commonmark:commonmark-ext-gfm-tables"         , version.ref = "commonmark" }
commonmark-tasklist     = { module = "org.commonmark:commonmark-ext-task-list-items"    , version.ref = "commonmark" }

ktor-auth               = { module = "io.ktor:ktor-auth"                                , version.ref = "ktor"}
ktor-serialization      = { module = "io.ktor:ktor-serialization"                       , version.ref = "ktor"}
ktor-server-core        = { module = "io.ktor:ktor-server-core"                         , version.ref = "ktor" }
ktor-server-host-common = { module = "io.ktor:ktor-server-host-common"                  , version.ref = "ktor"}
ktor-server-netty       = { module = "io.ktor:ktor-server-netty"                        , version.ref = "ktor"}
ktor-server-tests       = { module = "io.ktor:ktor-server-tests"                        , version.ref = "ktor"}


assertj-core            = { module = "org.assertj:assertj-core"                         , version.ref = "assertj" }
awaitility-core         = { module = "org.awaitility:awaitility"                        , version.ref = "awaitility" }
awaitility-kotlin       = { module = "org.awaitility:awaitility-kotlin"                 , version.ref = "awaitility" }
commons-io              = { module = "commons-io:commons-io"                            , version.ref = "commons-io" }
commons-codec           = { module = "commons-codec:commons-codec"                      , version.ref = "commons-codec" }
diffUtils               = { module = "io.github.java-diff-utils:java-diff-utils"        , version.ref = "diffUtils" }
ff4j                    = { module = "org.ff4j:ff4j-core"                               , version.ref = "ff4j" }
funcj                   = { module = "org.typemeta:funcj"                               , version.ref = "funcj" }
google-truth            = { module = "com.google.truth:truth"                           , version.ref = "google-truth" }
japicmp                 = { module = "com.github.siom79.japicmp:japicmp"                , version.ref = "japicmp" }
jffi                    = { module = "com.github.jnr:jffi"                              , version.ref = "jffi" }
jfreesvg                = { module = "org.jfree:jfreesvg"                               , version.ref = "jfreesvg" }
jgrapht                 = { module = "org.jgrapht:jgrapht-core"                         , version.ref = "jgrapht" }
jimfs                   = { module = "com.google.jimfs:jimfs"                           , version.ref = "jimfs" }
jnr-unixsocket          = { module = "com.github.jnr:jnr-unixsocket"                    , version.ref = "jnr-unixsocket" }
jol                     = { module = "org.openjdk.jol:jol-core"                         , version.ref = "jol" }
jsonPath                = { module = "com.jayway.jsonpath:json-path"                    , version.ref = "json-path" }
jsonPathKt              = { module = "com.nfeld.jsonpathkt:jsonpathkt"                  , version.ref = "json-pathkt" }
jsr305                  = { module = "com.google.code.findbugs:jsr305"                  , version.ref = "jsr305" }
ljv                     = { module = "org.atp-fivt:ljv"                                 , version.ref = "ljv" }
logback                 = { module = "ch.qos.logback:logback-classic"                   , version.ref = "logback" }
mapstruct               = { module = "org.mapstruct:mapstruct"                          , version.ref = "mapstruct" }
micronautBom            = { module = "io.micronaut:micronaut-bom"                       , version.ref = "micronaut-bom" }
nettyResolveDns         = { module = "io.netty:netty-resolver-dns"                      , version.ref = "netty-resolveDns" }
ok-io                   = { module = "com.squareup.okio:okio"                           , version.ref = "ok-io" }
openpdf                 = { module = "com.github.librepdf:openpdf"                      , version.ref = "openpdf" }
orsonpdf                = { module = "com.orsonpdf:orsonpdf"                            , version.ref = "orsonpdf" }
streamex                = { module = "one.util:streamex"                                , version.ref = "streamex" }
threetenExtra           = { module = "org.threeten:threeten-extra"                      , version.ref = "threetenExtra" }
trov4j                  = { module = "org.jetbrains.intellij.deps:trove4j"              , version.ref = "trov4j" }
turbine                 = { module = "app.cash.turbine:turbine"                         , version.ref = "turbine" }
typetools               = { module = "net.jodah:typetools"                              , version.ref = "typetools" }

[plugins]
kotlin-multiplatform    = { id = "org.jetbrains.kotlin.multiplatform"                    , version.ref = "kotlin" }
kotlin-jvm              = { id = "org.jetbrains.kotlin.jvm"                              , version.ref = "kotlin" }
kotlinx-serialization   = { id = "org.jetbrains.kotlin.plugin.serialization"             , version.ref = "kotlin" }
jetbrains-compose       = { id = "org.jetbrains.compose"                                 , version.ref = "jb-compose" }
shadow                  = { id = "com.github.johnrengelman.shadow"                       , version.ref = "shadow" }

[bundles]
commonmark              = ["commonmark-core", "commonmark-autolink", "commonmark-frontmatter","commonmark-tables","commonmark-tasklist"]
ktor                    = ["ktor-server-core", "ktor-serialization", "ktor-auth", "ktor-server-host-common", "ktor-server-netty", "logback"]


